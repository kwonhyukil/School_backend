<?php
/* 함수

*/

// hoisting : 지원 O
// - 함수 선언이 최상단으로 끌어올려지는 현상
// - 함수 선언은 어디에 있든지 상관없이 호출 가능
// - 변수 선언은 최상단으로 끌어올려지지만, 값은 끌어올려지지 않음

// overloading : 오버로딩 지원 X
// - 함수 이름이 같지만 매개변수의 개수나 타입이 다른 경우
// - PHP는 함수 오버로딩을 지원하지 않음
// - 대신 함수 이름을 다르게 하거나, 매개변수의 기본값을 설정하여 유사한 기능을 구현할 수 있음

// call by value : 지원 O
// - 함수에 인자를 전달할 때, 값이 복사되어 전달됨
// - 함수 내부에서 인자를 변경해도 원본 값에는 영향을 주지 않음

// call by reference : 지원 O
// - 함수에 인자를 전달할 때, 변수의 주소가 전달됨
// - 함수 내부에서 인자를 변경하면 원본 값에도 영향을 줌
// - & 연산자를 사용하여 참조 전달을 구현할 수 있음

// first-class function : 지원 O -> lamba function이 생기면서 지원
// -> closure function
// - 함수가 일급 객체로 취급됨
// - 함수는 변수에 할당할 수 있고, 다른 함수의 인자로 전달하거나, 함수에서 반환값으로 쓰일 수 있음
// - 함수는 객체와 유사하게 동작함

// closure function : 지원 O 
// - 함수 내부에서 외부 변수를 참조할 수 있는 함수
// - 함수가 정의된 위치의 스코프를 기억하고, 그 스코프의 변수를 참조할 수 있음
// - PHP에서는 use 키워드를 사용하여 외부 변수를 참조할 수 있음
// - closure function은 익명 함수로도 구현할 수 있음
// - closure function은 함수형 프로그래밍에서 유용하게 사용됨
// - closure function은 함수 내부에서 외부 변수를 참조할 수 있는 기능을 제공
// - closure function은 함수가 정의된 위치의 스코프를 기억하고, 그 스코프의 변수를 참조할 수 있음
// - closure function은 PHP에서 지원하는 기능으로, 함수형 프로그래밍에서 유용하게 사용됨

function sum($a, $b)
{
    return $a + $b;
}


function sum2($a, $b)
{
    return $a + $b;
}

echo sum2(1, 5);
echo "<br />";

function bar(&$a) // call by reference - &를 사용하면 주소값을 전달 받아 원본 값을 변경할 수 있음
// 함수에 인자를 참조로 전달
// & 연산자를 사용하여 참조 전달을 구현
// 함수 내부에서 인자를 변경하면 원본 값에도 영향을 줌
{
    $a[0] = 100;
}

$my_list = [3, 10, 100];

bar($my_list);
// $my_list는 함수 내부에서 변경되었으므로, 변경된 값을 확인

var_dump($my_list);
// $my_list는 [100, 10, 100]이 됨

echo "<br />";

function bar2(&$a)
{
    $a = 400;
}

$tes = 10;

bar2($tes);
var_dump($tes);

echo "<br />";


$foo = 2;


//capture
$bar = function () use (&$foo) { // 익명 함수 정의
    // use 키워드를 사용하여 외부 변수를 참조
    // 외부 변수를 참조할 때는 use 키워드를 사용해야 함
    // 외부 변수를 참조하지 않으면, 함수 내부에서 외부 변수를 사용할 수 없음

    echo "배아파<br>" . "나도 아파요<br> " . $foo . "<br />";
};

$foo = 10;
// $foo의 값은 10으로 변경되었지만, 익명 함수 내부에서는 2로 참조됨
// 익명 함수는 정의된 시점의 $foo 값을 참조
// 익명 함수는 클로저 함수로, 외부 변수를 참조할 수 있음
// 클로저 함수는 함수가 정의된 위치의 스코프를 기억하고,
// 그 스코프의 변수를 참조할 수 있음
// 클로저 함수는 PHP에서 지원하는 기능으로, 함수형 프로그래밍에서 유용하게 사용됨

$bar(); // 익명 함수 호출
echo "<br />";


function sum3($a, $b)
{
    echo $a + $b;
}

$test = "sum3"; // 함수 이름을 문자열로 저장
// 함수 이름을 문자열로 저장하면, 나중에 해당 함수를 호출할 수 있음

$test(2, 3);
